// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: buf/validate/v2/internal.proto

package validatev2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on InternalRules with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InternalRules) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InternalRules with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InternalRulesMultiError, or
// nil if none found.
func (m *InternalRules) ValidateAll() error {
	return m.validate(true)
}

func (m *InternalRules) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Type.(type) {
	case *InternalRules_Float:
		if v == nil {
			err := InternalRulesValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFloat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InternalRulesValidationError{
						field:  "Float",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InternalRulesValidationError{
						field:  "Float",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFloat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InternalRulesValidationError{
					field:  "Float",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return InternalRulesMultiError(errors)
	}

	return nil
}

// InternalRulesMultiError is an error wrapping multiple validation errors
// returned by InternalRules.ValidateAll() if the designated constraints
// aren't met.
type InternalRulesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InternalRulesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InternalRulesMultiError) AllErrors() []error { return m }

// InternalRulesValidationError is the validation error returned by
// InternalRules.Validate if the designated constraints aren't met.
type InternalRulesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InternalRulesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InternalRulesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InternalRulesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InternalRulesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InternalRulesValidationError) ErrorName() string { return "InternalRulesValidationError" }

// Error satisfies the builtin error interface
func (e InternalRulesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInternalRules.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InternalRulesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InternalRulesValidationError{}

// Validate checks the field values on InternalFloatsRules with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InternalFloatsRules) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InternalFloatsRules with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InternalFloatsRulesMultiError, or nil if none found.
func (m *InternalFloatsRules) ValidateAll() error {
	return m.validate(true)
}

func (m *InternalFloatsRules) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Type.(type) {
	case *InternalFloatsRules_Const:
		if v == nil {
			err := InternalFloatsRulesValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetConst()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InternalFloatsRulesValidationError{
						field:  "Const",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InternalFloatsRulesValidationError{
						field:  "Const",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConst()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InternalFloatsRulesValidationError{
					field:  "Const",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return InternalFloatsRulesMultiError(errors)
	}

	return nil
}

// InternalFloatsRulesMultiError is an error wrapping multiple validation
// errors returned by InternalFloatsRules.ValidateAll() if the designated
// constraints aren't met.
type InternalFloatsRulesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InternalFloatsRulesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InternalFloatsRulesMultiError) AllErrors() []error { return m }

// InternalFloatsRulesValidationError is the validation error returned by
// InternalFloatsRules.Validate if the designated constraints aren't met.
type InternalFloatsRulesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InternalFloatsRulesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InternalFloatsRulesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InternalFloatsRulesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InternalFloatsRulesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InternalFloatsRulesValidationError) ErrorName() string {
	return "InternalFloatsRulesValidationError"
}

// Error satisfies the builtin error interface
func (e InternalFloatsRulesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInternalFloatsRules.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InternalFloatsRulesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InternalFloatsRulesValidationError{}

// Validate checks the field values on InternalFloatsConstRules with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InternalFloatsConstRules) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InternalFloatsConstRules with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InternalFloatsConstRulesMultiError, or nil if none found.
func (m *InternalFloatsConstRules) ValidateAll() error {
	return m.validate(true)
}

func (m *InternalFloatsConstRules) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Expression

	if len(errors) > 0 {
		return InternalFloatsConstRulesMultiError(errors)
	}

	return nil
}

// InternalFloatsConstRulesMultiError is an error wrapping multiple validation
// errors returned by InternalFloatsConstRules.ValidateAll() if the designated
// constraints aren't met.
type InternalFloatsConstRulesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InternalFloatsConstRulesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InternalFloatsConstRulesMultiError) AllErrors() []error { return m }

// InternalFloatsConstRulesValidationError is the validation error returned by
// InternalFloatsConstRules.Validate if the designated constraints aren't met.
type InternalFloatsConstRulesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InternalFloatsConstRulesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InternalFloatsConstRulesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InternalFloatsConstRulesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InternalFloatsConstRulesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InternalFloatsConstRulesValidationError) ErrorName() string {
	return "InternalFloatsConstRulesValidationError"
}

// Error satisfies the builtin error interface
func (e InternalFloatsConstRulesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInternalFloatsConstRules.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InternalFloatsConstRulesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InternalFloatsConstRulesValidationError{}
